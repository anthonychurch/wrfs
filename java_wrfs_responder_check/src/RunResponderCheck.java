import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.Timer;
import java.util.ArrayList;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WinRfs_runDBcheckUI_5.java
 *
 * Created on Apr 3, 2012, 10:37:04 AM
 */
//package winrfs_rundbcheck;

/**
 *
 * @author Anthony  Church
 */
public class RunResponderCheck extends javax.swing.JFrame {

    /** Creates new form WinRfs_runDBcheckUI_5 */
    public RunResponderCheck() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        base_jPanel = new javax.swing.JPanel();
        title_jLabel2 = new javax.swing.JLabel();
        timeStamp_jLabel = new javax.swing.JLabel();
        timeStamp_jTextField = new javax.swing.JTextField();
        credit_jLabel = new javax.swing.JLabel();
        help_jButton = new javax.swing.JButton();
        run_jButton = new javax.swing.JButton();
        stop_jButton = new javax.swing.JButton();
        info_jLabel = new javax.swing.JLabel();
        log_jScrollPane = new javax.swing.JScrollPane();
        log_jTextArea = new javax.swing.JTextArea();
        log_jLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        base_jPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        title_jLabel2.setText("RESPONDER CHECK");

        timeStamp_jLabel.setText("Monitor Current System Time Stamp:");

        timeStamp_jTextField.setBackground(new java.awt.Color(236, 233, 216));
        timeStamp_jTextField.setBorder(null);

        credit_jLabel.setText("Developed by Anthony Church : aw_church@yahoo.com.au");

        help_jButton.setText("Help");
        help_jButton.setEnabled(false);

        run_jButton.setText("Run");
        run_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	run_jButtonActionPerformed(evt);
            }
        });

        stop_jButton.setText("Stop");
        stop_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_jButtonActionPerformed(evt,timeStamp);
            }
        });

        info_jLabel.setText("This is an aid in monitoring members availibility to respond a Fire Applicance at any time.");

        log_jTextArea.setBackground(new java.awt.Color(236, 233, 216));
        log_jTextArea.setColumns(20);
        log_jTextArea.setRows(5);
        log_jScrollPane.setViewportView(log_jTextArea);

        log_jLabel.setText("Log:");

        javax.swing.GroupLayout base_jPanelLayout = new javax.swing.GroupLayout(base_jPanel);
        base_jPanel.setLayout(base_jPanelLayout);
        base_jPanelLayout.setHorizontalGroup(
            base_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(base_jPanelLayout.createSequentialGroup()
                .addGroup(base_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(base_jPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(base_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(info_jLabel)
                            .addComponent(credit_jLabel)
                            .addGroup(base_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, base_jPanelLayout.createSequentialGroup()
                                    .addComponent(help_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(run_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(stop_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, base_jPanelLayout.createSequentialGroup()
                                    .addComponent(timeStamp_jLabel)
                                    .addGap(9, 9, 9)
                                    .addComponent(timeStamp_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(log_jScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(log_jLabel, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(base_jPanelLayout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(title_jLabel2)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        base_jPanelLayout.setVerticalGroup(
            base_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(base_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title_jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(info_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(base_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeStamp_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeStamp_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(log_jLabel)
                .addGap(7, 7, 7)
                .addComponent(log_jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(base_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(help_jButton)
                    .addComponent(stop_jButton)
                    .addComponent(run_jButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(credit_jLabel)
                .addContainerGap())
        );

        log_jLabel.getAccessibleContext().setAccessibleName("Log:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(base_jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(base_jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>
    
    private void run_jButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
    	runProgram = true;
    	runCheck();
    }
    
    private void stop_jButtonActionPerformed(java.awt.event.ActionEvent evt, GetCurrentTimeStamp timeStamp) {                                             
    	runProgram = false;
		tss = MessageUtilities.getTimeStampSeconds(timeStamp);
		timeStamp_jTextField.setText("   " + tss + "  :: PROGRAM STOPPED!! ");
    }                     
    
    private static void printLog(String logImportance, String logText, String logTmeStmp){
    	log_jTextArea.setText(log_jTextArea.getText() + logImportance + " :: " + logTmeStmp + " "+ logText + " \n");
    }
    
    private static String[] populateLogArray(String arg0, String arg1, String arg2){
    	String[] returnArray = {arg2,arg0,arg1};
    	return returnArray;
    }
    
    private static String logMacro(String importance, String message, String time, String existingLog, boolean print){
		//*** Made as a static variable ***// String logSeperator = " ;;;; ";
		String colon = " : ";
		String[] logArray = populateLogArray(importance, message, time);
    	if(print)
    		printLog(logArray[0], logArray[1], logArray[2]);
		String log = existingLog + logArray[0] + colon + logArray[1] + colon +  logArray[2] + logSeperator;
		return log; 
    }
    
    private static void checkMessages(){
		printLogs = true;
		log = "";
		String[][] emailMessages = null;
		String[][] smsMessages = null;
		boolean logOntoEmail = true;
		if(runProgram == true){
			log = logMacro("ADVICE", "Checking Email for New Messages.", tss, log, printLogs);
			//LOG ONTO THE EMAIL ACCOUNT
			//Gmail_Imap_getMsgSubjectLine emailCheck = new Gmail_Imap_getMsgSubjectLine(gmailUsrName, gmailPassword);
  			Gmail_Imap_getSendReceiveMessages emailCheck = new Gmail_Imap_getSendReceiveMessages(gmailStatusUsrName, gmailPassword);
			try {
				//CHECK EMAIL ACCOUNT FOR NEW MESSAGES
				System.out.println("//CHECK EMAIL ACCOUNT FOR NEW MESSAGES///////");
				String[][] newMessages = emailCheck.getSubjectLines();
				if(newMessages != null){
					log = logMacro("ADVICE", "There are " + newMessages.length + " new email messages." , tss, log, printLogs);
					//TEST IF THE CONNECTION TO THE EMAIL ACCOUNT IS GOOD
					if(newMessages[0][0] == "false"){
						log = logMacro("ERROR", "Could not retreive email messages : " + newMessages[0][1]+ ".", tss, log, printLogs);
						log = logMacro(" ", " ", " ", log, printLogs);
						log = logMacro(" ", " ", " ", log, printLogs);
						logOntoEmail = false;
					}else{
						emailMessages = newMessages;
					}
				}else{
					log = logMacro("ADVICE", "No New Email Messages.", tss, log, printLogs);
					log = logMacro(" ", " ", " ", log, printLogs);
					log = logMacro(" ", " ", " ", log, printLogs);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
			log = logMacro("ADVICE", "Checking SMS for New Messages.", tss, log, printLogs);

			//LOG ONTO THE SMS ACCOUNT
			System.out.println("//CHECK SMS ACCOUNT FOR NEW MESSAGES///////");
	        boolean secureMode = false;
	        boolean debug = false;
	        String  debugFile = "";
			
	        SMS_M4u_GetMessage m4u = new SMS_M4u_GetMessage(m4uUsrName,m4uPassword);

	        String[][] newSmsMessages = m4u.testCheckReplies(secureMode, debug, debugFile);

	        if(newSmsMessages != null){
	        	log = logMacro("ADVICE", "There are " + newSmsMessages.length + " new SMS messages." , tss, log, printLogs);
	        	//TEST IF THE CONNECTION TO THE SMS ACCOUNT IS GOOD
	        	if(newSmsMessages[0][0] == "false"){
					log = logMacro("ERROR", "Could not retreive SMS messages : " + newSmsMessages[0][1]+ ".", tss, log, printLogs);
					log = logMacro(" ", " ", " ", log, printLogs);
					log = logMacro(" ", " ", " ", log, printLogs);
	        	}else{
	        		smsMessages = newSmsMessages;
				}
	        }else{
	        	System.out.println("//Open SMS 7///////");
	        	log = logMacro("ADVICE", "No New SMS Messages.", tss, log, printLogs);
	        	log = logMacro(" ", " ", " ", log, printLogs);
	        	log = logMacro(" ", " ", " ", log, printLogs);
	        }

			//GET SMS AND EMAIL MESSAGES
	        //boolean checkEmailAndSMS = ((emailMessages != null) || (smsMessages != null));
			if((emailMessages != null) || (smsMessages != null)){
	        //if(checkEmailAndSMS == true){		
				//CONNECT TO DATABASE
	        	log = logMacro("ADVICE", "Connecting to Database.", tss, log, printLogs);
				System.out.println("//CONNECT TO DATABASE///////");
				SQL_DButilities winRfsDB = new SQL_DButilities();
				winRfsDB.setUserPassUrl(url,userName,password);
				winRfsDB.connect();
				//CYCLE THROUGH NEW MESSAGES, SPLIT THE SUBJECT
			
				//GET ALL THE NAMES OF THE MEMBERS IN THE STATUS TABLE
				System.out.println("//GET ALL THE NAMES OF THE MEMBERS IN THE STATUS TABLE///////");
				log = logMacro("ADVICE", "Getting all Active Members names from Status Table.", tss, log, printLogs);
				log = logMacro(" ", " ", " ", log, printLogs);
				String DBgetStatment = "select name from status";
				ResultSet rs = winRfsDB.query(DBgetStatment);
				int howManyNams = 1;
				String holdList = "";
				try {
					if(rs.next()){
						holdList = rs.getString(1);
						while(rs.next()){
							howManyNams += 1;
							holdList = holdList + ":" + rs.getString(1);
						}//END WHILE
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}//END IF
				String[] getActiveMembersNames = new String[howManyNams];
				getActiveMembersNames = holdList.split(":+");
								
				String[] re = {"Re:","RE:","re:","rE:"};
				String[] messageDetails = null;
			
				String ist = "";
				String update = "";
				String set1 = "";
				String set2 = "";
				String where = "";
				String[] logData = {"","","",""};
				String[] logDataTypes = {"int","int","String","String"};
				int logMaxValue = winRfsDB.getMaxValue(tableLog, "id") + 1;
				
				if(emailMessages != null){
					for(int i = 0; i < emailMessages.length; i++){
						System.out.println("// TESTING MESSAGE " + emailMessages[i][0] + " //////////");
						System.out.println("//NEW MESSAGE " + emailMessages[i][0] + "///////");
						log = logMacro("ADVICE", "New Message : " + emailMessages[i][0] + ".", tss, log, printLogs);
						log = logMacro("ADVICE", "Testing Details of Message.", tss, log, printLogs);
						//TEST TO SEE IF MESSAGE IS LEGITIMATE USING MessageUtilities class
						messageDetails = MessageUtilities.getCodeMessageDetails(emailMessages[i], getActiveMembersNames, re);

						if(Boolean.parseBoolean(messageDetails[0]) == true){
							//UPDATE LOG TABLE WITH SUCCESSFUL MESSAGE
							System.out.println("messageDetails[2] = " + messageDetails[2]);
							logData[0] = Integer.toString(logMaxValue);
							logData[1] = messageDetails[1];
							logData[2] = messageDetails[2];
							logData[3] = tss;
							winRfsDB.insert(tableLog,"id",logDataTypes,logData,logMaxValue);
							//IF LEGITIMATE UPDATE AND RECORD DETAILS
							//UPDATE LOG STATUS TABLE
							log = logMacro("ADVICE", "SUCCESS : " + messageDetails[2] + " is Code " + messageDetails[1] + ".", tss, log, printLogs);
							log = logMacro("ADVICE", "Updating Status of " + messageDetails[2] + ".", tss, log, printLogs);
							System.out.println("//Updating Status of " + messageDetails[2] + ".///////");
							update = "UPDATE " + tableStatus;
							set1 = " SET " + column2Name + " = '" + Integer.parseInt(messageDetails[1]) + "'";
							set2 = " , " + column6Name + " = '" + emailMessages[i][1] + "'";
							where = " WHERE " + column3Name + " = '" + messageDetails[2] + "'";
							ist = update + set1 + set2 + where;
							winRfsDB.executeUpdate(ist);
							logMaxValue += 1;
						}else{	
							//UPDATE LOG TABLE WITH FAILED DETAILS SIGNIFIIED BY A '0' IN THE CODE COLUMN
							System.out.println("messageDetails[2] = " + messageDetails[2]);
							logData[0] = Integer.toString(logMaxValue);//ID
							logData[1] = "00";//FAILED MESSAGE CODE
							logData[2] = smsMessages[i][0];//ALL THE MESSAGE IN ORIGINAL FORM
							logData[3] = tss;
							//REPLY TO SENDER WITH FAIL MESSAGE
							emailCheck.sendMessage(emailMessages[i][2],"ERROR :: " + emailMessages[i][0], messageDetails[4] + "\nPlease rectify and resend message if possible.");
							log = logMacro("ERROR", "FAIL : " + messageDetails[4] + ". Return to sender.", tss, log, printLogs);
						}//END IF ELSE
						System.out.println("//");
						System.out.println("//");
						log = logMacro(" ", " ", " ", log, printLogs);
						log = logMacro(" ", " ", " ", log, printLogs);
					}//END FOR
				}//END IF EMAIL NOT NULL
				
				if(smsMessages != null){
					for(int i = 0; i < smsMessages.length; i++){
						System.out.println("// TESTING MESSAGE " + smsMessages[i][0] + " //////////");
						System.out.println("//NEW MESSAGE " + smsMessages[i][0] + "///////");
						log = logMacro("ADVICE", "New Message : " + smsMessages[i][0] + ".", tss, log, printLogs);
						log = logMacro("ADVICE", "Testing Details of Message.", tss, log, printLogs);
						//TEST TO SEE IF MESSAGE IS LEGITIMATE USING MessageUtilities class
						messageDetails = MessageUtilities.getCodeMessageDetails(smsMessages[i], getActiveMembersNames, re);

						if(Boolean.parseBoolean(messageDetails[0]) == true){
							//UPDATE LOG TABLE WITH SUCCESSFUL MESSAGE
							System.out.println("messageDetails[2] = " + messageDetails[2]);
							logData[0] = Integer.toString(logMaxValue);//ID
							logData[1] = messageDetails[1];//CODE
							logData[2] = messageDetails[2];//NAME
							logData[3] = tss;
							//IF LEGITIMATE UPDATE AND RECORD DETAILS
							//UPDATE LOG STATUS TABLE
							winRfsDB.insert(tableLog,"id",logDataTypes,logData,logMaxValue);
							log = logMacro("ADVICE", "SUCCESS : " + messageDetails[2] + " is Code " + messageDetails[1] + ".", tss, log, printLogs);
							log = logMacro("ADVICE", "Updating Status of " + messageDetails[2] + ".", tss, log, printLogs);
							System.out.println("//Updating Status of " + messageDetails[2] + ".///////");
							update = "UPDATE " + tableStatus;
							set1 = " SET " + column2Name + " = '" + Integer.parseInt(messageDetails[1]) + "'";
							set2 = " , " + column6Name + " = '" + smsMessages[i][1] + "'";
							where = " WHERE " + column3Name + " = '" + messageDetails[2] + "'";
							ist = update + set1 + set2 + where;
							winRfsDB.executeUpdate(ist);
							logMaxValue += 1;
						}else{
							//UPDATE LOG TABLE WITH FAILED DETAILS SIGNIFIIED BY A '0' IN THE CODE COLUMN
							System.out.println("messageDetails[2] = " + messageDetails[2]);
							logData[0] = Integer.toString(logMaxValue);//ID
							logData[1] = "00";//FAILED MESSAGE CODE
							logData[2] = smsMessages[i][0];//ALL THE MESSAGE IN ORIGINAL FORM
							logData[3] = tss;
							//REPLY TO SENDER WITH FAIL MESSAGE
							log = logMacro("ERROR", "FAIL : " + messageDetails[4] + ". Return to sender to be implemented for SMS.", tss, log, printLogs);
						}//END IF ELSE
						System.out.println("//");
						System.out.println("//");
						log = logMacro(" ", " ", " ", log, printLogs);
						log = logMacro(" ", " ", " ", log, printLogs);
					}//END FOR
				}//END IF SMS NOT NULL
				
				log = logMacro("ADVICE", "Disconnecting to Database.", tss, log, printLogs);
				log = logMacro(" ", " ", " ", log, printLogs);
				log = logMacro(" ", " ", " ", log, printLogs);
				winRfsDB.close();
				
				//FLAG FOR GARBAGE COLLECTION
				re = null;
				messageDetails = null;
				ist = null;
				update = null;
				set1 = null;
				set2 = null;
				where = null;
			}else{
				log = logMacro("ADVICE", "There are no new SMS or Emails.", tss, log, printLogs);
	        	log = logMacro(" ", " ", " ", log, printLogs);
	        	log = logMacro(" ", " ", " ", log, printLogs);

			}//END IF ELSE SMS AND EMAIL = NULL
			
	        //RECORD WHETHER THAT LOG FILE COULD BE EMAILED
			if(logOntoEmail == false){
				log = logMacro("ERROR", "Could not email log file.", tss, log, printLogs);
	        	log = logMacro(" ", " ", " ", log, printLogs);
	        	log = logMacro(" ", " ", " ", log, printLogs);
			}
			log = logMacro("ADVICE", "STOP MESSAGE CHECK.", tss, log, printLogs);
        	log = logMacro(" ", " ", " ", log, printLogs);
        	log = logMacro(" ", " ", " ", log, printLogs);
        	log = logMacro(" ", " ", " ", log, printLogs);
        	log = logMacro(" ", " ", " ", log, printLogs);
        	log = logMacro(" ", " ", " ", log, printLogs);
        	log = logMacro(" ", " ", " ", log, printLogs);
        	
			String[] writeLog = log.split(logSeperator);
			StringUtilities.printArray(writeLog);
			String getTodaysDate = tss.substring(0,10);
			String logFolder = StringUtilities.makeFolder("c://WinRfs_ResponderCheck_Log").toString() + "/";
			String logFile = "WinRfs_ResponderCheck_Log_" + getTodaysDate;
			StringUtilities.writeLog(logFolder + logFile + ".txt", writeLog);
			//EMAIL LOG FILE TO logwinmaleerfb@gmail.com
			if(logOntoEmail == true){
				emailCheck.sendMessageAttachment(gmailStatusUsrName, gmailLogUsrName, "Log Update " + tss, "Log Update", logFolder + logFile + ".txt");
				emailCheck.close();
			}
			
			//FLAG FOR GARBAGE COLLECTION
			writeLog = null;
			getTodaysDate = null;
			logFolder =  null;
			logFile = null;
			log = null;
			emailMessages = null;
			smsMessages = null;
		}//END IF runProgram
    }
    
    private static void checkmembers() throws Exception{
    	log = logMacro("ADVICE", "Checking Status Table for members aailability.", tss, log, printLogs);
		SQL_DButilities winRfsDB = new SQL_DButilities();
		winRfsDB.setUserPassUrl(url,userName,password);
		winRfsDB.connect();
		String DBgetStatment = "select code,name from status";
		ResultSet rs = winRfsDB.query(DBgetStatment);
		String holdList = "";
		ArrayList<String[]> statusList = new ArrayList<String[]>( );
		ArrayList<String[]> available = new ArrayList<String[]>( );
		String[] hold = new String[2];
		try {
			if(rs.next()){
				System.out.println("rs.getString(1) = " + rs.getString(1));
				System.out.println("rs.getString(2) = " + rs.getString(2));
				holdList = rs.getString(1);
				hold[0] = rs.getString(1);
				hold[1] = rs.getString(2);
				statusList.add(hold);
				System.out.println("holdList1 = " + holdList);
				while(rs.next()){
					hold[0] = rs.getString(1);
					hold[1] = rs.getString(2);
					statusList.add(hold);
				}//END WHILE
				
				String[] g = statusList.get(0);
				int size = statusList.size();
				
				for(int i = 0; i < size;i++){
					if(Integer.parseInt(g[0]) == 1){
						available.add(g);
					}
				}
				String checkMessage = "RESPONDER CHECK : There are " + available.size() + " members available to respond.";
				log = logMacro("ADVICE", checkMessage, tss, log, printLogs);
				System.out.println(checkMessage);
				SMS_Ipipi_Utilities ipipi = new SMS_Ipipi_Utilities(ipipiUsrName,ipipiPassword);
				
				Gmail_Imap_Utilities sendE = new Gmail_Imap_Utilities();
				sendE.setUserPass(gmailStatusUsrName, gmailPassword);
				if(sendE.connect()){
					for(String rce : responderCheckEMAILOUT){
						sendE.sendMessage(gmailStatusUsrName, rce, checkMessage, "");
						log = logMacro("ADVICE", "SUCCESS : RESPONDER CHECK message sent to " + rce, tss, log, printLogs);
					}
					sendE.close();
				}
	
				done = true;
				
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			log = logMacro("ERROR", "Failed to check status table.", tss, log, printLogs);
			done = false;
		}//END IF
    	
    }
    
    private static void runCheck(){
    	ActionListener upDateClock = new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		if(runProgram == true){
           			tss = MessageUtilities.getTimeStampSeconds(timeStamp);
        			timeStamp_jTextField.setText("   " + tss);
        			String hr = TimeStampUtilities.getTShours(tss);
        			String mn = TimeStampUtilities.getTSminutes(tss);
        			if((Integer.parseInt(hr + mn) == checkAvailability[0]) || (Integer.parseInt(hr + mn) == checkAvailability[1])){
        				if(done == false){
        					System.out.println(Integer.parseInt(hr + mn));
        					System.out.println(tss);
        					try {
								checkmembers();
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
        				}
        			}else{
        				//STOP REPEATING ACTION
        				done = false;
        			}
        		}//END IF
        	}// ACTION PERFORMED
        };//END ACTION LISTNER taskPerformer
        
        ActionListener checkDB = new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		checkMessages();
        	}
        };
        
        if(delayCeckDB > (1000 * 60 * 60 * 24 * 1)){
        	tss = MessageUtilities.getTimeStampSeconds(timeStamp);
        	log_jTextArea.setText(log_jTextArea.getText() + "ERROR :: " + tss + " delayCeckDB variable > 24 hours \n");
        }else{
        	
        	new Timer(checkMessages, checkDB).start();
        }// END ELSE
        new Timer(delay, upDateClock).start();

        tss = MessageUtilities.getTimeStampSeconds(timeStamp);
        timeStamp_jTextField.setText("   " + tss);
        log = logMacro("ADVICE", "Program Restarted.", tss, log, printLogs);
    	log = logMacro(" ", " ", " ", log, printLogs);
    	log = logMacro(" ", " ", " ", log, printLogs);
    }//RUN CHECK

    

//private void timeStamp_jTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
//}
	private static int delay = 1000;//1 second delay
	//1 second = 1000
	//1 minute = 60 000
	//1 hour = 3 600 000
	private static int checkMessages = 15000;//1000 * 60 * 60;//Every Hour
	private static int delayCeckDB = 1000 * 60 * 60;//Every Hour//15000;//15 second delay//5000;//5 second delay
	private static boolean runProgram = true;
	private static String tss = "";
	private static String nextTimeStamp = "";
	
	private static String gmailStatusUsrName = "statuswinmaleerfb@gmail.com" ;
	private static String gmailPassword = "roadrunner01";
	
	private static String ipipiUsrName = "anthonychurch" ;
	private static String ipipiPassword = "61665GID";
	
	private static String m4uUsrName = "WinmaleeRural002";//"Self082" ;//"WinmaleeRural002";
	private static String m4uPassword = "fire000";//"z7HGcNKW";//"fire000";
	
	private static String gmailLogUsrName = "logwinmaleerfb@gmail.com";

	private static String[] responderCheckSMSOUT = {"61405319054"};
	private static String[] responderCheckEMAILOUT = {"aw_church@yahoo.com.au"};
	
	private static String url = "jdbc:mysql://localhost:3306/winRfs_availability";
	private static String userName = "root";
	private static String password = "please";
	private static String tableStatus = "status";
	private static String tableLog = "log";
	private static String column2Name = "code";
	private static String column3Name = "name";
	private static String column6Name = "time";
	
	private static String logSeperator = " ;;;; ";
	
	
	private static String log = "";
	private static boolean printLogs = true;
	
	private static int[] checkAvailability = {1000,1400};//{{1600,1605},{1100,1105}};
	private static boolean done = false;
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

         /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunResponderCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunResponderCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunResponderCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunResponderCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }//END TRY CATCH
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
            	
            	//final GetCurrentTimeStamp timeStamp = new GetCurrentTimeStamp();
                new RunResponderCheck().setVisible(true);
                runCheck();
               	
            }//END RUN
        });//END EVENTQUEUE
    }//END MAIN
    // Variables declaration - do not modify
    private javax.swing.JPanel base_jPanel;
    private javax.swing.JLabel credit_jLabel;
    private javax.swing.JButton help_jButton;
    private javax.swing.JLabel info_jLabel;
    private javax.swing.JLabel log_jLabel;
    private javax.swing.JScrollPane log_jScrollPane;
    private static javax.swing.JTextArea log_jTextArea;
    private javax.swing.JButton run_jButton;
    private javax.swing.JButton stop_jButton;
    private javax.swing.JLabel timeStamp_jLabel;
    private static javax.swing.JTextField timeStamp_jTextField;
    private javax.swing.JLabel title_jLabel2;
    // End of variables declaration
    
    private final static GetCurrentTimeStamp timeStamp = new GetCurrentTimeStamp();
}
